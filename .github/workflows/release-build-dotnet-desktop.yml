# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-2022  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: src/Captura.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src/Test/Tests.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # # Execute all unit tests in the solution
    # - name: Execute unit tests
    #   run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the application
    - name: Build the application
      run: msbuild $env:Solution_Name -t:rebuild -verbosity:diag -property:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Prepare distribution folder
    - name: Prepare distribution folder
      run: |
        # Create dist folder
        New-Item -ItemType Directory -Force -Path dist
        New-Item -ItemType Directory -Force -Path temp
        
        $consoleBinFolder = "src/Captura.Console/bin/${{ matrix.configuration }}"
        $uiBinFolder = "src/Captura/bin/${{ matrix.configuration }}"
        
        # Copy License files
        Copy-Item -Path "licenses" -Destination "dist/licenses" -Recurse -Force
        
        # Copy Languages
        Copy-Item -Path "$uiBinFolder/Languages" -Destination "dist/languages" -Recurse -Force
        
        # Copy executables and config files
        Copy-Item -Path "$consoleBinFolder/*.exe*" -Destination "dist/" -Force
        Copy-Item -Path "$uiBinFolder/*.exe*" -Destination "dist/" -Force
        
        # Copy Keymap files
        Copy-Item -Path "$uiBinFolder/keymaps" -Destination "dist/keymaps" -Recurse -Force
        
        # Copy lib folders for Release build
        Copy-Item -Path "$consoleBinFolder/lib" -Destination "dist/lib" -Recurse -Force -ErrorAction SilentlyContinue
        Copy-Item -Path "$uiBinFolder/lib" -Destination "dist/lib" -Recurse -Force -ErrorAction SilentlyContinue
      shell: pwsh
      env:
        Configuration: ${{ matrix.configuration }}

    # Package portable version
    - name: Package portable version
      run: |
        # Create portable directories
        New-Item -ItemType Directory -Force -Path "dist/Settings"
        New-Item -ItemType Directory -Force -Path "dist/Codecs"
        
        $version = "${{ github.ref_name }}"
        $portableZip = "nCaptura-${version}-Portable.zip"
        Compress-Archive -Path "dist/*" -DestinationPath $portableZip
        echo "PORTABLE_ZIP=$portableZip" >> $env:GITHUB_ENV
        
        # Remove portable-specific directories for installer
        Remove-Item -Path "dist/Settings" -Recurse -Force
        Remove-Item -Path "dist/Codecs" -Recurse -Force
      shell: pwsh

    # Install Inno Setup
    - name: Install Inno Setup
      run: |
        choco install innosetup -y
      shell: pwsh

    # Build installer
    - name: Build installer with Inno Setup
      run: |
        $version = "${{ github.ref_name }}".TrimStart('v')
        $innoPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        & $innoPath "/DMyAppVersion=$version" "Inno.iss"
        
        # Rename output file
        $installerName = "nCaptura-${{ github.ref_name }}-Setup.exe"
        Move-Item -Path "temp/Captura-Setup.exe" -Destination $installerName -Force
        echo "INSTALLER_EXE=$installerName" >> $env:GITHUB_ENV
      shell: pwsh

    # Upload the application as artifact
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nCaptura-${{ github.ref_name }}-Release
        path: |
          ${{ env.PORTABLE_ZIP }}
          ${{ env.INSTALLER_EXE }}
      env:
        Configuration: ${{ matrix.configuration }}
    
    # Upload binaries to GitHub Release
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.PORTABLE_ZIP }}
          ${{ env.INSTALLER_EXE }}
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # # Decode the base 64 encoded pfx and save the Signing_Certificate
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # # Create the app package by building and packaging the Windows Application Packaging project
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}

    # # Remove the pfx
    # - name: Remove the pfx
    #   run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages
